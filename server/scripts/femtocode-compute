#!/usr/bin/env python

# Copyright 2016 DIANA-HEP
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse

if __name__ == "__main__":
    argumentParser = argparse.ArgumentParser(description="""A femtocode-compute process does the heavy computation, acquiring and maintaining whatever data and metadata is necessary to get the work done.

A femtocode-compute process has the following responsibilities:
   - Communicates with a data storage backend through a generic API (satisfied by numpyio and rootio).
   - Fetches metadata with per-group information for that backend to fetch stripes.
   - Maintains a cache of data segments and fetches data if not already in cache.
   - Runs code (compiled by femtocode-dispatch) to perform heavy computations and produce subtallies.
   - Fetches data and runs computations in parallel, performing work in first-READY-first-server order. Nevertheless, there is only one thread for heavy computations, so run one femtocode-compute process per CPU core (or even pin the process to that core).
   - Pushes subtallies back to femtocode-accumulate.

Femtocode-compute processes are STATEFUL: they keep a queue of work to be done with their executors in memory, as well as an in-memory cache of frequently used data segments. Restarting a femtocode-compute process clears its cache and drops its share of the work, but femtocode-accumulate would reassign that work, so the queries can still be successful.

Communication with femtocode-compute is ZeroMQ. Metadata may be file-based or a database.

We assume that femtocode-dispatch, femtocode-accumulate, and femtocode-compute run on the same processor architecture, accepting the same bytecode.""")
