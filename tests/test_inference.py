#!/usr/bin/env python

# Copyright 2016 DIANA-HEP
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
from collections import namedtuple

from femtocode.typesystem import *
from femtocode.inference import *

class TestInference(unittest.TestCase):
    def runTest(self):
        pass

    def test_literal(self):
        self.assertEqual(literal(impossible, "==", 5), impossible)
        self.assertEqual(literal(impossible, "!=", 5), impossible)

        self.assertEqual(literal(null, "==", None), null)
        self.assertEqual(literal(null, "==", 5), impossible)
        self.assertEqual(literal(null, "!=", None), impossible)
        self.assertEqual(literal(null, "!=", 5), null)

        # no intervals on booleans: "x == True" will be converted into "x" before typecheck
        self.assertEqual(literal(boolean, "==", True), boolean)
        self.assertEqual(literal(boolean, "==", False), boolean)
        self.assertEqual(literal(boolean, "!=", True), boolean)
        self.assertEqual(literal(boolean, "!=", False), boolean)
        self.assertEqual(literal(boolean, "==", 5), impossible)
        self.assertEqual(literal(boolean, "!=", 5), boolean)

        self.assertEqual(literal(union(null, boolean), "==", True), boolean)
        self.assertEqual(literal(union(null, boolean), "==", False), boolean)
        self.assertEqual(literal(union(null, boolean), "==", None), null)
        self.assertEqual(literal(union(null, boolean), "==", 5), impossible)

        self.assertEqual(literal(union(null, boolean), "!=", True), union(null, boolean))
        self.assertEqual(literal(union(null, boolean), "!=", False), union(null, boolean))
        self.assertEqual(literal(union(null, boolean), "!=", None), boolean)
        self.assertEqual(literal(union(null, boolean), "!=", 5), union(null, boolean))

        self.assertEqual(literal(integer, "==", 5), integer(5, 5))
        self.assertEqual(literal(integer(0, 10), "==", 5), integer(5, 5))
        self.assertEqual(literal(integer(10, 20), "==", 5), impossible)
        self.assertEqual(literal(integer, "!=", 5), union(integer(max=4), integer(min=6)))
        self.assertEqual(literal(integer(0, 10), "!=", 5), union(integer(0, 4), integer(6, 10)))
        self.assertEqual(literal(integer(10, 20), "!=", 5), integer(10, 20))

        self.assertEqual(literal(real, "==", 5), integer(5, 5))
        self.assertEqual(literal(real, "==", 3.14), real(3.14, 3.14))
        self.assertEqual(literal(real(0, 10), "==", 5), integer(5, 5))
        self.assertEqual(literal(real(0, 10), "==", 3.14), real(3.14, 3.14))
        self.assertEqual(literal(real(10, 20), "==", 5), impossible)
        self.assertEqual(literal(real(0, 10), "==", 10), integer(10, 10))
        self.assertEqual(literal(real(0, almost(10)), "==", 10), impossible)
        self.assertEqual(literal(union(real(0, 7), integer(5, 10)), "==", 6), integer(6, 6))

        self.assertEqual(literal(real, "!=", 5), union(real(max=almost(5)), real(min=almost(5))))
        self.assertEqual(literal(real, "!=", 3.14), union(real(max=almost(3.14)), real(min=almost(3.14))))
        self.assertEqual(literal(real(0, 10), "!=", 5), union(real(0, almost(5)), real(almost(5), 10)))
        self.assertEqual(literal(real(0, 10), "!=", 3.14), union(real(0, almost(3.14)), real(almost(3.14), 10)))
        self.assertEqual(literal(real(10, 20), "!=", 5), real(10, 20))
        self.assertEqual(literal(real(0, 10), "!=", 10), real(0, almost(10)))
        self.assertEqual(literal(real(0, almost(10)), "!=", 10), real(0, almost(10)))
        self.assertEqual(literal(union(real(0, 7), integer(5, 10)), "!=", 6), union(real(min=0.0, max=almost(6.0)), real(min=almost(6.0), max=7.0), integer(min=8, max=10)))

        self.assertEqual(literal(string, "==", b"hello"), string("bytes", 5, 5))
        self.assertEqual(literal(string, "==", u"hello"), impossible)
        self.assertEqual(literal(string("unicode"), "==", u"hello"), string("unicode", 5, 5))
        self.assertEqual(literal(string, "!=", b"hello"), string)
        self.assertEqual(literal(string, "!=", u"hello"), string)
        self.assertEqual(literal(string("unicode"), "!=", u"hello"), string("unicode"))

        self.assertEqual(literal(collection(real), "==", []), empty)
        self.assertEqual(literal(collection(real), "==", [3.14]), collection(real(3.14, 3.14), 1, 1))
        self.assertEqual(literal(collection(real), "==", [2.71, 3.14]), collection(union(real(2.71, 2.71), real(3.14, 3.14)), 2, 2))
        self.assertEqual(literal(collection(real), "==", [1, 2, 3]), collection(integer(1, 3), 3, 3))
        self.assertEqual(literal(collection(real), "==", [2, 4, 6]), collection(union(integer(2, 2), integer(4, 4), integer(6, 6)), 3, 3))
        self.assertEqual(literal(collection(real(0, 5)), "==", [2.71, 3.14]), collection(union(real(2.71, 2.71), real(3.14, 3.14)), 2, 2))
        self.assertEqual(literal(collection(real(3, 5)), "==", [2.71, 3.14]), impossible)
        self.assertEqual(literal(collection(real, 0, 5), "==", [2.71, 3.14]), collection(union(real(2.71, 2.71), real(3.14, 3.14)), 2, 2))
        self.assertEqual(literal(collection(real, 3, 5), "==", [2.71, 3.14]), impossible)

        self.assertEqual(literal(collection(real), "!=", []), collection(real, fewest=1))
        self.assertEqual(literal(collection(real), "!=", [3.14]), collection(real))
        self.assertEqual(literal(collection(real), "!=", [2.71, 3.14]), collection(real))
        self.assertEqual(literal(collection(real(0, 5)), "!=", [2.71, 3.14]), collection(real(0, 5)))
        self.assertEqual(literal(collection(real(3, 5)), "!=", [2.71, 3.14]), collection(real(3, 5)))
        self.assertEqual(literal(collection(real, 0, 5), "!=", [2.71, 3.14]), collection(real, 0, 5))
        self.assertEqual(literal(collection(real, 3, 5), "!=", [2.71, 3.14]), collection(real, 3, 5))

        self.assertEqual(literal(record(f=union(integer, string)), "==", namedtuple("tmp", ["f"])(3)), record(f=integer(3, 3)))
        self.assertEqual(literal(record(f=union(integer, string)), "==", namedtuple("tmp", ["f"])(b"hey")), record(f=string("bytes", 3, 3)))
        self.assertEqual(literal(record(one=integer, two=real, three=string), "==", namedtuple("tmp", ["one", "two", "three"])(1, 2.2, b"3")), record(one=integer(1, 1), two=real(2.2, 2.2), three=string(fewest=1, most=1)))
        tree = namedtuple("tree", ["left", "right"])
        self.assertEqual(literal(resolve([record("tree", left=union(null, "tree"), right=union(null, "tree"))])[0], "==", tree(tree(None, None), tree(None, tree(None, None)))), record(left=record(left=null, right=null), right=record(right=record(left=null, right=null), left=null)))

        self.assertEqual(literal(record(f=union(integer, string)), "!=", namedtuple("tmp", ["f"])(3)), record(f=union(integer, string)))
        self.assertEqual(literal(record(f=union(integer, string)), "!=", namedtuple("tmp", ["f"])(b"hey")), record(f=union(integer, string)))
        self.assertEqual(literal(record(one=integer, two=real, three=string), "!=", namedtuple("tmp", ["one", "two", "three"])(1, 2.2, b"3")), record(one=integer, two=real, three=string))
        tree = namedtuple("tree", ["left", "right"])
        self.assertEqual(literal(resolve([record("tree", left=union(null, "tree"), right=union(null, "tree"))])[0], "!=", tree(tree(None, None), tree(None, tree(None, None)))), resolve([record("tree", left=union(null, "tree"), right=union(null, "tree"))])[0])

        self.assertEqual(literal(union(vector(real, 3), vector(real, 4)), "==", [1, 2, 3]), vector(integer(1, 3), 3))
        self.assertEqual(literal(union(vector(real, 3), vector(real, 4)), "==", [1, 2, 3, 4]), vector(integer(1, 4), 4))

        self.assertEqual(literal(real, ">", 3), real(almost(3), almost(inf)))
        self.assertEqual(literal(real, ">=", 3), real(3, almost(inf)))
        self.assertEqual(literal(real, "<", 3), real(almost(-inf), almost(3)))
        self.assertEqual(literal(real, "<=", 3), real(almost(-inf), 3))

        self.assertEqual(literal(real(-10, -5), ">", 3), impossible)
        self.assertEqual(literal(real(-10, -5), ">=", 3), impossible)
        self.assertEqual(literal(real(5, 10), "<", 3), impossible)
        self.assertEqual(literal(real(5, 10), "<=", 3), impossible)

        self.assertEqual(literal(extended(3, inf), ">", 3), extended(almost(3), inf))
        self.assertEqual(literal(extended(3, inf), ">=", 3), extended(3, inf))
        self.assertEqual(literal(extended(-inf, 3), "<", 3), extended(-inf, almost(3)))
        self.assertEqual(literal(extended(-inf, 3), "<=", 3), extended(-inf, 3))

        self.assertEqual(literal(extended(almost(3), inf), ">", 3), extended(almost(3), inf))
        self.assertEqual(literal(extended(almost(3), inf), ">=", 3), extended(almost(3), inf))
        self.assertEqual(literal(extended(-inf, almost(3)), "<", 3), extended(-inf, almost(3)))
        self.assertEqual(literal(extended(-inf, almost(3)), "<=", 3), extended(-inf, almost(3)))

        self.assertEqual(literal(string, "size>", 3), string(fewest=4))
        self.assertEqual(literal(string, "size>=", 3), string(fewest=3))
        self.assertEqual(literal(string, "size<", 3), string(most=2))
        self.assertEqual(literal(string, "size<=", 3), string(most=3))

        self.assertEqual(literal(string(fewest=3), "size>", 3), string(fewest=4))
        self.assertEqual(literal(string(fewest=3), "size>=", 3), string(fewest=3))
        self.assertEqual(literal(string(most=3), "size<", 3), string(most=2))
        self.assertEqual(literal(string(most=3), "size<=", 3), string(most=3))

        self.assertEqual(literal(string(most=3), "size>", 3), impossible)
        self.assertEqual(literal(string(most=3), "size>=", 3), string(fewest=3, most=3))
        self.assertEqual(literal(string(fewest=3), "size<", 3), impossible)
        self.assertEqual(literal(string(fewest=3), "size<=", 3), string(fewest=3, most=3))

        self.assertEqual(literal(collection(real), "size>", 3), collection(real, fewest=4))
        self.assertEqual(literal(collection(real), "size>=", 3), collection(real, fewest=3))
        self.assertEqual(literal(collection(real), "size<", 3), collection(real, most=2))
        self.assertEqual(literal(collection(real), "size<=", 3), collection(real, most=3))

        self.assertEqual(literal(collection(real, fewest=3), "size>", 3), collection(real, fewest=4))
        self.assertEqual(literal(collection(real, fewest=3), "size>=", 3), collection(real, fewest=3))
        self.assertEqual(literal(collection(real, most=3), "size<", 3), collection(real, most=2))
        self.assertEqual(literal(collection(real, most=3), "size<=", 3), collection(real, most=3))

        self.assertEqual(literal(collection(real, most=3), "size>", 3), impossible)
        self.assertEqual(literal(collection(real, most=3), "size>=", 3), collection(real, fewest=3, most=3))
        self.assertEqual(literal(collection(real, fewest=3), "size<", 3), impossible)
        self.assertEqual(literal(collection(real, fewest=3), "size<=", 3), collection(real, fewest=3, most=3))

        self.assertEqual(literal(union(collection(real, ordered=True), collection(string, ordered=False)), "ordered", None), collection(real, ordered=True))
        self.assertEqual(literal(union(collection(real, ordered=True), collection(string, ordered=False)), "notordered", None), collection(string, ordered=False))






    # def assertCase(case, f):
    #     if case is True:
    #         assert f()
    #     elif case is False:
    #         assert not f()
    #     else:
    #         try:
    #             f()
    #         except case:
    #             pass
    #         except Exception:
    #             assert False
    #         else:
    #             assert False

    # def valuesInInterval(interval):
    #     if interval.min < 0.0 and 0.0 not in interval:
    #         if interval.min == float("-inf") and interval.max == float("-inf"):
    #             intervalMinus = [float("-inf")]
    #         elif interval.min == float("-inf"):
    #             if isinstance(interval.max, almost):
    #                 intervalMinus = [float("-inf"), interval.max.real - 1.0]
    #             else:
    #                 intervalMinus = [float("-inf"), interval.max.real - 1.0, interval.max]
    #         elif interval.min == almost("-inf"):
    #             if isinstance(interval.max, almost):
    #                 intervalMinus = [interval.max.real - 1.0]
    #             else:
    #                 intervalMinus = [interval.max.real - 1.0, interval.max]
    #         else:
    #             if isinstance(interval.min, almost) and isinstance(interval.max, almost):
    #                 intervalMinus = [(interval.min.real + interval.max.real)/2.0]
    #             elif isinstance(interval.min, almost):
    #                 intervalMinus = [(interval.min.real + interval.max.real)/2.0, interval.max]
    #             elif isinstance(interval.max, almost):
    #                 intervalMinus = [interval.min, (interval.min.real + interval.max.real)/2.0]
    #             else:
    #                 intervalMinus = [interval.min, (interval.min.real + interval.max.real)/2.0, interval.max]
    #     elif interval.min < 0.0:
    #         if interval.min == float("-inf"):
    #             intervalMinus = [interval.min, -2.0, -1.0, 0.0]
    #         elif interval.min == almost("-inf"):
    #             intervalMinus = [-2.0, -1.0, 0.0]
    #         elif isinstance(interval.min, almost):
    #             intervalMinus = [interval.min.real/2.0, 0.0]
    #         else:
    #             intervalMinus = [interval.min, interval.min.real/2.0, 0.0]
    #     elif interval.min == 0.0:
    #         intervalMinus = [0.0]
    #     else:
    #         intervalMinus = []

    #     if interval.max > 0.0 and 0.0 not in interval:
    #         if interval.max == float("inf") and interval.min == float("inf"):
    #             intervalPlus = [float("inf")]
    #         elif interval.max == float("inf"):
    #             if isinstance(interval.min, almost):
    #                 intervalPlus = [interval.min.real + 1.0, float("inf")]
    #             else:
    #                 intervalPlus = [interval.min, interval.min.real + 1.0, float("inf")]
    #         elif interval.max == almost("inf"):
    #             if isinstance(interval.min, almost):
    #                 intervalPlus = [interval.min.real + 1.0]
    #             else:
    #                 intervalPlus = [interval.min, interval.min.real + 1.0]
    #         else:
    #             if isinstance(interval.max, almost) and isinstance(interval.min, almost):
    #                 intervalPlus = [(interval.min.real + interval.max.real)/2.0]
    #             elif isinstance(interval.max, almost):
    #                 intervalPlus = [interval.min, (interval.min.real + interval.max.real)/2.0]
    #             elif isinstance(interval.min, almost):
    #                 intervalPlus = [(interval.min.real + interval.max.real)/2.0, interval.max]
    #             else:
    #                 intervalPlus = [interval.min, (interval.min.real + interval.max.real)/2.0, interval.max]
    #     elif interval.max > 0.0:
    #         if interval.max == float("inf"):
    #             intervalPlus = [1.0, 2.0, interval.max]
    #         elif interval.max == almost("inf"):
    #             intervalPlus = [1.0, 2.0]
    #         elif isinstance(interval.max, almost):
    #             intervalPlus = [interval.max.real/2.0]
    #         else:
    #             intervalPlus = [interval.max.real/2.0, interval.max]
    #     else:
    #         intervalPlus = []

    #     return set(intervalMinus + intervalPlus)

    # ## open-ended interval arithmetic

    # ## BooleanType acceptance

    # BooleanType()

    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(False,     lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(False,     lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(False,     lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(False,     lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(False,     lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(False,     lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(False,     lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(True,      lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=True, hasFalse=False, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=True, hasUnknown=False)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=True)))
    # assertCase(TypeError, lambda: BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False).accepts(BooleanType(hasTrue=False, hasFalse=False, hasUnknown=False)))

    # ## NumberType basic checks

    # NumberType("(-inf, inf)")
    # NumberType("(-inf, inf)", whole=False)
    # NumberType("(-inf, inf)", whole=True)
    # assertCase(TypeError, lambda: NumberType("(-inf, inf)", whole=None))

    # NumberType(3.14, "inf")
    # assertCase(TypeError, lambda: NumberType(3.14, 10, whole=True))
    # NumberType(0, 3.14)
    # assertCase(TypeError, lambda: NumberType(0, 3.14, whole=True))

    # assert NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf)"))
    # assert NumberType("(-inf, inf)", whole=False).accepts(NumberType("(-inf, inf)"))
    # assert not NumberType("(-inf, inf)", whole=True).accepts(NumberType("(-inf, inf)"))
    # assert NumberType("(-inf, inf)", whole=False).accepts(NumberType("(-inf, inf)", whole=False))
    # assert not NumberType("(-inf, inf)", whole=True).accepts(NumberType("(-inf, inf)", whole=False))
    # assert NumberType("(-inf, inf)", whole=False).accepts(NumberType("(-inf, inf)", whole=True))
    # assert NumberType("(-inf, inf)", whole=True).accepts(NumberType("(-inf, inf)", whole=True))

    # NumberType(0, 0)
    # NumberType(0, 1)
    # assertCase(TypeError, lambda: NumberType(1, 0))

    # ## NumberType acceptance

    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-inf, -inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, -2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-inf, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[-2.0, -2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 0.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(-2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(-2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[0.0, 0.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, 2.0)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(0.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(0.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[2.0, 2.0]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf]").accepts(NumberType("[2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("(2.0, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("(2.0, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("(2.0, inf)").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-inf, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(-2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(0.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("[2.0, inf]"))
    # assert not NumberType("[inf, inf]").accepts(NumberType("(2.0, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))
    # assert     NumberType("[inf, inf]").accepts(NumberType("[inf, inf]"))

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 if left.accepts(right):
    #                     for y in valuesInInterval(right):
    #                         if not y in left:
    #                             raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, y, left))

    # ## NumberType contains

    # for a in ["-inf", almost("-inf"), -3, almost(-3), 0, almost(0), 3, almost(3), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -3, almost(-3), 0, almost(0), 3, almost(3), "inf", almost("inf")]:
    #         try:
    #             interval = NumberType(a, b)
    #         except TypeError:
    #             continue
    #         else:
    #             values = valuesInInterval(interval)
    #             # print repr(interval), values
    #             if float("-inf") in interval:
    #                 assert float("-inf") in values
    #             if float("inf") in interval:
    #                 assert float("inf") in values
    #             if 0.0 in interval:
    #                 assert 0.0 in values
    #             assert len(values) > 0
    #             for x in values:
    #                 if x not in interval:
    #                     raise AssertionError("%r not in %r" % (x, interval))

    # assert     float("-inf") in NumberType("[-inf, -inf]")
    # assert     float("-inf") in NumberType("[-inf, -inf]")
    # assert     float("-inf") in NumberType("[-inf, -2.0]")
    # assert     float("-inf") in NumberType("[-inf, -2.0)")
    # assert     float("-inf") in NumberType("[-inf, 0.0]")
    # assert     float("-inf") in NumberType("[-inf, 0.0)")
    # assert     float("-inf") in NumberType("[-inf, 2.0]")
    # assert     float("-inf") in NumberType("[-inf, 2.0)")
    # assert     float("-inf") in NumberType("[-inf, inf]")
    # assert     float("-inf") in NumberType("[-inf, inf)")
    # assert     float("-inf") in NumberType("[-inf, -inf]")
    # assert not float("-inf") in NumberType("(-inf, -2.0]")
    # assert not float("-inf") in NumberType("(-inf, -2.0)")
    # assert not float("-inf") in NumberType("(-inf, 0.0]")
    # assert not float("-inf") in NumberType("(-inf, 0.0)")
    # assert not float("-inf") in NumberType("(-inf, 2.0]")
    # assert not float("-inf") in NumberType("(-inf, 2.0)")
    # assert not float("-inf") in NumberType("(-inf, inf]")
    # assert not float("-inf") in NumberType("(-inf, inf)")
    # assert not float("-inf") in NumberType("[-2.0, -2.0]")
    # assert not float("-inf") in NumberType("[-2.0, -2.0]")
    # assert not float("-inf") in NumberType("[-2.0, 0.0]")
    # assert not float("-inf") in NumberType("[-2.0, 0.0)")
    # assert not float("-inf") in NumberType("[-2.0, 2.0]")
    # assert not float("-inf") in NumberType("[-2.0, 2.0)")
    # assert not float("-inf") in NumberType("[-2.0, inf]")
    # assert not float("-inf") in NumberType("[-2.0, inf)")
    # assert not float("-inf") in NumberType("[-2.0, -2.0]")
    # assert not float("-inf") in NumberType("(-2.0, 0.0]")
    # assert not float("-inf") in NumberType("(-2.0, 0.0)")
    # assert not float("-inf") in NumberType("(-2.0, 2.0]")
    # assert not float("-inf") in NumberType("(-2.0, 2.0)")
    # assert not float("-inf") in NumberType("(-2.0, inf]")
    # assert not float("-inf") in NumberType("(-2.0, inf)")
    # assert not float("-inf") in NumberType("[0.0, 0.0]")
    # assert not float("-inf") in NumberType("[0.0, 0.0]")
    # assert not float("-inf") in NumberType("[0.0, 2.0]")
    # assert not float("-inf") in NumberType("[0.0, 2.0)")
    # assert not float("-inf") in NumberType("[0.0, inf]")
    # assert not float("-inf") in NumberType("[0.0, inf)")
    # assert not float("-inf") in NumberType("[0.0, 0.0]")
    # assert not float("-inf") in NumberType("(0.0, 2.0]")
    # assert not float("-inf") in NumberType("(0.0, 2.0)")
    # assert not float("-inf") in NumberType("(0.0, inf]")
    # assert not float("-inf") in NumberType("(0.0, inf)")
    # assert not float("-inf") in NumberType("[2.0, 2.0]")
    # assert not float("-inf") in NumberType("[2.0, 2.0]")
    # assert not float("-inf") in NumberType("[2.0, inf]")
    # assert not float("-inf") in NumberType("[2.0, inf)")
    # assert not float("-inf") in NumberType("[2.0, 2.0]")
    # assert not float("-inf") in NumberType("(2.0, inf]")
    # assert not float("-inf") in NumberType("(2.0, inf)")
    # assert not float("-inf") in NumberType("[inf, inf]")
    # assert not float("-inf") in NumberType("[inf, inf]")
    # assert not float("-inf") in NumberType("[inf, inf]")
    # assert not float("-2.0") in NumberType("[-inf, -inf]")
    # assert not float("-2.0") in NumberType("[-inf, -inf]")
    # assert     float("-2.0") in NumberType("[-inf, -2.0]")
    # assert not float("-2.0") in NumberType("[-inf, -2.0)")
    # assert     float("-2.0") in NumberType("[-inf, 0.0]")
    # assert     float("-2.0") in NumberType("[-inf, 0.0)")
    # assert     float("-2.0") in NumberType("[-inf, 2.0]")
    # assert     float("-2.0") in NumberType("[-inf, 2.0)")
    # assert     float("-2.0") in NumberType("[-inf, inf]")
    # assert     float("-2.0") in NumberType("[-inf, inf)")
    # assert not float("-2.0") in NumberType("[-inf, -inf]")
    # assert     float("-2.0") in NumberType("(-inf, -2.0]")
    # assert not float("-2.0") in NumberType("(-inf, -2.0)")
    # assert     float("-2.0") in NumberType("(-inf, 0.0]")
    # assert     float("-2.0") in NumberType("(-inf, 0.0)")
    # assert     float("-2.0") in NumberType("(-inf, 2.0]")
    # assert     float("-2.0") in NumberType("(-inf, 2.0)")
    # assert     float("-2.0") in NumberType("(-inf, inf]")
    # assert     float("-2.0") in NumberType("(-inf, inf)")
    # assert     float("-2.0") in NumberType("[-2.0, -2.0]")
    # assert     float("-2.0") in NumberType("[-2.0, -2.0]")
    # assert     float("-2.0") in NumberType("[-2.0, 0.0]")
    # assert     float("-2.0") in NumberType("[-2.0, 0.0)")
    # assert     float("-2.0") in NumberType("[-2.0, 2.0]")
    # assert     float("-2.0") in NumberType("[-2.0, 2.0)")
    # assert     float("-2.0") in NumberType("[-2.0, inf]")
    # assert     float("-2.0") in NumberType("[-2.0, inf)")
    # assert     float("-2.0") in NumberType("[-2.0, -2.0]")
    # assert not float("-2.0") in NumberType("(-2.0, 0.0]")
    # assert not float("-2.0") in NumberType("(-2.0, 0.0)")
    # assert not float("-2.0") in NumberType("(-2.0, 2.0]")
    # assert not float("-2.0") in NumberType("(-2.0, 2.0)")
    # assert not float("-2.0") in NumberType("(-2.0, inf]")
    # assert not float("-2.0") in NumberType("(-2.0, inf)")
    # assert not float("-2.0") in NumberType("[0.0, 0.0]")
    # assert not float("-2.0") in NumberType("[0.0, 0.0]")
    # assert not float("-2.0") in NumberType("[0.0, 2.0]")
    # assert not float("-2.0") in NumberType("[0.0, 2.0)")
    # assert not float("-2.0") in NumberType("[0.0, inf]")
    # assert not float("-2.0") in NumberType("[0.0, inf)")
    # assert not float("-2.0") in NumberType("[0.0, 0.0]")
    # assert not float("-2.0") in NumberType("(0.0, 2.0]")
    # assert not float("-2.0") in NumberType("(0.0, 2.0)")
    # assert not float("-2.0") in NumberType("(0.0, inf]")
    # assert not float("-2.0") in NumberType("(0.0, inf)")
    # assert not float("-2.0") in NumberType("[2.0, 2.0]")
    # assert not float("-2.0") in NumberType("[2.0, 2.0]")
    # assert not float("-2.0") in NumberType("[2.0, inf]")
    # assert not float("-2.0") in NumberType("[2.0, inf)")
    # assert not float("-2.0") in NumberType("[2.0, 2.0]")
    # assert not float("-2.0") in NumberType("(2.0, inf]")
    # assert not float("-2.0") in NumberType("(2.0, inf)")
    # assert not float("-2.0") in NumberType("[inf, inf]")
    # assert not float("-2.0") in NumberType("[inf, inf]")
    # assert not float("-2.0") in NumberType("[inf, inf]")
    # assert not float("0.0") in NumberType("[-inf, -inf]")
    # assert not float("0.0") in NumberType("[-inf, -inf]")
    # assert not float("0.0") in NumberType("[-inf, -2.0]")
    # assert not float("0.0") in NumberType("[-inf, -2.0)")
    # assert     float("0.0") in NumberType("[-inf, 0.0]")
    # assert not float("0.0") in NumberType("[-inf, 0.0)")
    # assert     float("0.0") in NumberType("[-inf, 2.0]")
    # assert     float("0.0") in NumberType("[-inf, 2.0)")
    # assert     float("0.0") in NumberType("[-inf, inf]")
    # assert     float("0.0") in NumberType("[-inf, inf)")
    # assert not float("0.0") in NumberType("[-inf, -inf]")
    # assert not float("0.0") in NumberType("(-inf, -2.0]")
    # assert not float("0.0") in NumberType("(-inf, -2.0)")
    # assert     float("0.0") in NumberType("(-inf, 0.0]")
    # assert not float("0.0") in NumberType("(-inf, 0.0)")
    # assert     float("0.0") in NumberType("(-inf, 2.0]")
    # assert     float("0.0") in NumberType("(-inf, 2.0)")
    # assert     float("0.0") in NumberType("(-inf, inf]")
    # assert     float("0.0") in NumberType("(-inf, inf)")
    # assert not float("0.0") in NumberType("[-2.0, -2.0]")
    # assert not float("0.0") in NumberType("[-2.0, -2.0]")
    # assert     float("0.0") in NumberType("[-2.0, 0.0]")
    # assert not float("0.0") in NumberType("[-2.0, 0.0)")
    # assert     float("0.0") in NumberType("[-2.0, 2.0]")
    # assert     float("0.0") in NumberType("[-2.0, 2.0)")
    # assert     float("0.0") in NumberType("[-2.0, inf]")
    # assert     float("0.0") in NumberType("[-2.0, inf)")
    # assert not float("0.0") in NumberType("[-2.0, -2.0]")
    # assert     float("0.0") in NumberType("(-2.0, 0.0]")
    # assert not float("0.0") in NumberType("(-2.0, 0.0)")
    # assert     float("0.0") in NumberType("(-2.0, 2.0]")
    # assert     float("0.0") in NumberType("(-2.0, 2.0)")
    # assert     float("0.0") in NumberType("(-2.0, inf]")
    # assert     float("0.0") in NumberType("(-2.0, inf)")
    # assert     float("0.0") in NumberType("[0.0, 0.0]")
    # assert     float("0.0") in NumberType("[0.0, 0.0]")
    # assert     float("0.0") in NumberType("[0.0, 2.0]")
    # assert     float("0.0") in NumberType("[0.0, 2.0)")
    # assert     float("0.0") in NumberType("[0.0, inf]")
    # assert     float("0.0") in NumberType("[0.0, inf)")
    # assert     float("0.0") in NumberType("[0.0, 0.0]")
    # assert not float("0.0") in NumberType("(0.0, 2.0]")
    # assert not float("0.0") in NumberType("(0.0, 2.0)")
    # assert not float("0.0") in NumberType("(0.0, inf]")
    # assert not float("0.0") in NumberType("(0.0, inf)")
    # assert not float("0.0") in NumberType("[2.0, 2.0]")
    # assert not float("0.0") in NumberType("[2.0, 2.0]")
    # assert not float("0.0") in NumberType("[2.0, inf]")
    # assert not float("0.0") in NumberType("[2.0, inf)")
    # assert not float("0.0") in NumberType("[2.0, 2.0]")
    # assert not float("0.0") in NumberType("(2.0, inf]")
    # assert not float("0.0") in NumberType("(2.0, inf)")
    # assert not float("0.0") in NumberType("[inf, inf]")
    # assert not float("0.0") in NumberType("[inf, inf]")
    # assert not float("0.0") in NumberType("[inf, inf]")
    # assert not float("2.0") in NumberType("[-inf, -inf]")
    # assert not float("2.0") in NumberType("[-inf, -inf]")
    # assert not float("2.0") in NumberType("[-inf, -2.0]")
    # assert not float("2.0") in NumberType("[-inf, -2.0)")
    # assert not float("2.0") in NumberType("[-inf, 0.0]")
    # assert not float("2.0") in NumberType("[-inf, 0.0)")
    # assert     float("2.0") in NumberType("[-inf, 2.0]")
    # assert not float("2.0") in NumberType("[-inf, 2.0)")
    # assert     float("2.0") in NumberType("[-inf, inf]")
    # assert     float("2.0") in NumberType("[-inf, inf)")
    # assert not float("2.0") in NumberType("[-inf, -inf]")
    # assert not float("2.0") in NumberType("(-inf, -2.0]")
    # assert not float("2.0") in NumberType("(-inf, -2.0)")
    # assert not float("2.0") in NumberType("(-inf, 0.0]")
    # assert not float("2.0") in NumberType("(-inf, 0.0)")
    # assert     float("2.0") in NumberType("(-inf, 2.0]")
    # assert not float("2.0") in NumberType("(-inf, 2.0)")
    # assert     float("2.0") in NumberType("(-inf, inf]")
    # assert     float("2.0") in NumberType("(-inf, inf)")
    # assert not float("2.0") in NumberType("[-2.0, -2.0]")
    # assert not float("2.0") in NumberType("[-2.0, -2.0]")
    # assert not float("2.0") in NumberType("[-2.0, 0.0]")
    # assert not float("2.0") in NumberType("[-2.0, 0.0)")
    # assert     float("2.0") in NumberType("[-2.0, 2.0]")
    # assert not float("2.0") in NumberType("[-2.0, 2.0)")
    # assert     float("2.0") in NumberType("[-2.0, inf]")
    # assert     float("2.0") in NumberType("[-2.0, inf)")
    # assert not float("2.0") in NumberType("[-2.0, -2.0]")
    # assert not float("2.0") in NumberType("(-2.0, 0.0]")
    # assert not float("2.0") in NumberType("(-2.0, 0.0)")
    # assert     float("2.0") in NumberType("(-2.0, 2.0]")
    # assert not float("2.0") in NumberType("(-2.0, 2.0)")
    # assert     float("2.0") in NumberType("(-2.0, inf]")
    # assert     float("2.0") in NumberType("(-2.0, inf)")
    # assert not float("2.0") in NumberType("[0.0, 0.0]")
    # assert not float("2.0") in NumberType("[0.0, 0.0]")
    # assert     float("2.0") in NumberType("[0.0, 2.0]")
    # assert not float("2.0") in NumberType("[0.0, 2.0)")
    # assert     float("2.0") in NumberType("[0.0, inf]")
    # assert     float("2.0") in NumberType("[0.0, inf)")
    # assert not float("2.0") in NumberType("[0.0, 0.0]")
    # assert     float("2.0") in NumberType("(0.0, 2.0]")
    # assert not float("2.0") in NumberType("(0.0, 2.0)")
    # assert     float("2.0") in NumberType("(0.0, inf]")
    # assert     float("2.0") in NumberType("(0.0, inf)")
    # assert     float("2.0") in NumberType("[2.0, 2.0]")
    # assert     float("2.0") in NumberType("[2.0, 2.0]")
    # assert     float("2.0") in NumberType("[2.0, inf]")
    # assert     float("2.0") in NumberType("[2.0, inf)")
    # assert     float("2.0") in NumberType("[2.0, 2.0]")
    # assert not float("2.0") in NumberType("(2.0, inf]")
    # assert not float("2.0") in NumberType("(2.0, inf)")
    # assert not float("2.0") in NumberType("[inf, inf]")
    # assert not float("2.0") in NumberType("[inf, inf]")
    # assert not float("2.0") in NumberType("[inf, inf]")
    # assert not float("inf") in NumberType("[-inf, -inf]")
    # assert not float("inf") in NumberType("[-inf, -inf]")
    # assert not float("inf") in NumberType("[-inf, -2.0]")
    # assert not float("inf") in NumberType("[-inf, -2.0)")
    # assert not float("inf") in NumberType("[-inf, 0.0]")
    # assert not float("inf") in NumberType("[-inf, 0.0)")
    # assert not float("inf") in NumberType("[-inf, 2.0]")
    # assert not float("inf") in NumberType("[-inf, 2.0)")
    # assert     float("inf") in NumberType("[-inf, inf]")
    # assert not float("inf") in NumberType("[-inf, inf)")
    # assert not float("inf") in NumberType("[-inf, -inf]")
    # assert not float("inf") in NumberType("(-inf, -2.0]")
    # assert not float("inf") in NumberType("(-inf, -2.0)")
    # assert not float("inf") in NumberType("(-inf, 0.0]")
    # assert not float("inf") in NumberType("(-inf, 0.0)")
    # assert not float("inf") in NumberType("(-inf, 2.0]")
    # assert not float("inf") in NumberType("(-inf, 2.0)")
    # assert     float("inf") in NumberType("(-inf, inf]")
    # assert not float("inf") in NumberType("(-inf, inf)")
    # assert not float("inf") in NumberType("[-2.0, -2.0]")
    # assert not float("inf") in NumberType("[-2.0, -2.0]")
    # assert not float("inf") in NumberType("[-2.0, 0.0]")
    # assert not float("inf") in NumberType("[-2.0, 0.0)")
    # assert not float("inf") in NumberType("[-2.0, 2.0]")
    # assert not float("inf") in NumberType("[-2.0, 2.0)")
    # assert     float("inf") in NumberType("[-2.0, inf]")
    # assert not float("inf") in NumberType("[-2.0, inf)")
    # assert not float("inf") in NumberType("[-2.0, -2.0]")
    # assert not float("inf") in NumberType("(-2.0, 0.0]")
    # assert not float("inf") in NumberType("(-2.0, 0.0)")
    # assert not float("inf") in NumberType("(-2.0, 2.0]")
    # assert not float("inf") in NumberType("(-2.0, 2.0)")
    # assert     float("inf") in NumberType("(-2.0, inf]")
    # assert not float("inf") in NumberType("(-2.0, inf)")
    # assert not float("inf") in NumberType("[0.0, 0.0]")
    # assert not float("inf") in NumberType("[0.0, 0.0]")
    # assert not float("inf") in NumberType("[0.0, 2.0]")
    # assert not float("inf") in NumberType("[0.0, 2.0)")
    # assert     float("inf") in NumberType("[0.0, inf]")
    # assert not float("inf") in NumberType("[0.0, inf)")
    # assert not float("inf") in NumberType("[0.0, 0.0]")
    # assert not float("inf") in NumberType("(0.0, 2.0]")
    # assert not float("inf") in NumberType("(0.0, 2.0)")
    # assert     float("inf") in NumberType("(0.0, inf]")
    # assert not float("inf") in NumberType("(0.0, inf)")
    # assert not float("inf") in NumberType("[2.0, 2.0]")
    # assert not float("inf") in NumberType("[2.0, 2.0]")
    # assert     float("inf") in NumberType("[2.0, inf]")
    # assert not float("inf") in NumberType("[2.0, inf)")
    # assert not float("inf") in NumberType("[2.0, 2.0]")
    # assert     float("inf") in NumberType("(2.0, inf]")
    # assert not float("inf") in NumberType("(2.0, inf)")
    # assert     float("inf") in NumberType("[inf, inf]")
    # assert     float("inf") in NumberType("[inf, inf]")
    # assert     float("inf") in NumberType("[inf, inf]")

    # ## NumberType union

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left | right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         if not x in result:
    #                             raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, x, result))
    #                     for y in valuesInInterval(right):
    #                         if not y in result:
    #                             raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, y, result))

    # ## NumberType addition

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left + right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             z = x + y
    #                             if z not in result:
    #                                 raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, z, result))

    # ## NumberType subtraction

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left - right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             z = x - y
    #                             if z not in result:
    #                                 raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, z, result))

    # ## NumberType multiplication

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left * right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             z = x * y
    #                             if z not in result:
    #                                 raise AssertionError("(%r %r %r %r) %r not in %r" % (a, b, c, d, z, result))

    # ## NumberType division

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left / right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             try:
    #                                 z = x / y
    #                             except ZeroDivisionError:
    #                                 if x > 0:
    #                                     z = float("inf")
    #                                 else:
    #                                     z = float("-inf")
    #                             if z not in result:
    #                                 raise AssertionError("(%r %r %r %r) %r / %r = %r not in %r" % (a, b, c, d, x, y, z, result))

    # ## NumberType power (handmade)

    # assert NumberType(-5, 5)**NumberType(2, 2) == NumberType(0, 25)

    # assert NumberType(0, 0)**NumberType(-0.5, -0.5) == NumberType("inf", "inf")
    # assert NumberType(0, 0)**NumberType(-1, -1) == NumberType("inf", "inf")
    # assert NumberType(0, 0)**NumberType(-2, -2) == NumberType("inf", "inf")

    # assertCase(TypeError, lambda: NumberType(1, 1)**NumberType("inf", "inf") == NumberType(1, 1))
    # assertCase(TypeError, lambda: NumberType(1, 1)**NumberType("-inf", "-inf") == NumberType(1, 1))
    # assertCase(TypeError, lambda: NumberType(-1, -1)**NumberType("inf", "inf") == NumberType(1, 1))
    # assertCase(TypeError, lambda: NumberType(-1, -1)**NumberType("-inf", "-inf") == NumberType(1, 1))

    # assert NumberType(0.9, 0.9)**NumberType("inf", "inf") == NumberType(0, 0)
    # assert NumberType(-0.9, -0.9)**NumberType("inf", "inf") == NumberType(0, 0)
    # assert NumberType(0.9, 0.9)**NumberType("-inf", "-inf") == NumberType("inf", "inf")
    # assert NumberType(-0.9, -0.9)**NumberType("-inf", "-inf") == NumberType("inf", "inf")

    # assert NumberType(1.1, 1.1)**NumberType("inf", "inf") == NumberType("inf", "inf")
    # assert NumberType(-1.1, -1.1)**NumberType("inf", "inf") == NumberType("inf", "inf")
    # assert NumberType(1.1, 1.1)**NumberType("-inf", "-inf") == NumberType(0, 0)
    # assert NumberType(-1.1, -1.1)**NumberType("-inf", "-inf") == NumberType(0, 0)

    # assert NumberType("inf", "inf")**NumberType(0, 0) == NumberType(1, 1)
    # assert NumberType("-inf", "-inf")**NumberType(0, 0) == NumberType(1, 1)
    # assert NumberType("inf", "inf")**NumberType(-0.5, -0.5) == NumberType(0, 0)
    # assert NumberType("-inf", "-inf")**NumberType(-0.5, -0.5) == NumberType(0, 0)
    # assert NumberType("inf", "inf")**NumberType(-1, -1) == NumberType(0, 0)
    # assert NumberType("-inf", "-inf")**NumberType(-1, -1) == NumberType(0, 0)
    # assert NumberType("inf", "inf")**NumberType(-2, -2) == NumberType(0, 0)
    # assert NumberType("-inf", "-inf")**NumberType(-2, -2) == NumberType(0, 0)

    # assert NumberType("-inf", "-inf")**NumberType(1, 1) == NumberType("-inf", "-inf")
    # assert NumberType("-inf", "-inf")**NumberType(3, 3) == NumberType("-inf", "-inf")
    # assert NumberType("-inf", "-inf")**NumberType(5, 5) == NumberType("-inf", "-inf")

    # assert NumberType("inf", "inf")**NumberType(1, 1) == NumberType("inf", "inf")
    # assert NumberType("inf", "inf")**NumberType(3, 3) == NumberType("inf", "inf")
    # assert NumberType("inf", "inf")**NumberType(5, 5) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(2, 2) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(4, 4) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(6, 6) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(2.5, 2.5) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(3.5, 3.5) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(3.5, 4) == NumberType("inf", "inf")
    # assert NumberType("-inf", "-inf")**NumberType(4, 4) == NumberType("inf", "inf")

    # assertCase(TypeError, lambda: NumberType(-3, -3)**NumberType(4.5, 4.5))

    # assert NumberType(3, 3, whole=True)**NumberType(4, 4, whole=True) == NumberType(81, 81, whole=True)
    # assert NumberType(3, 3, whole=False)**NumberType(4, 4, whole=True) == NumberType(81, 81, whole=False)
    # assert NumberType(3, 3, whole=True)**NumberType(4, 4, whole=False) == NumberType(81, 81, whole=False)
    # assert NumberType(3, 3, whole=False)**NumberType(4, 4, whole=False) == NumberType(81, 81, whole=False)
    # assert NumberType(4, 4, whole=True)**NumberType(0.5, 0.5, whole=False) == NumberType(2, 2, whole=False)

    # assert NumberType(100, 100)**NumberType(999, 999) == NumberType("inf", "inf")
    # assert NumberType(100, 100)**NumberType(-999, -999) == NumberType(0, 0)
    # assert NumberType(0.01, 0.01)**NumberType(999, 999) == NumberType(0, 0)
    # assert NumberType(0.01, 0.01)**NumberType(-999, -999) == NumberType("inf", "inf")

    # assert NumberType(100, 100)**NumberType(0, 999) == NumberType(1, "inf")
    # assert NumberType(0.01, 100)**NumberType(999, 999) == NumberType(0, "inf")

    # ## NumberType power (generated)

    # def power(x, y):
    #     if math.isnan(x) and y == 0:
    #         return 1.0
    #     elif math.isnan(x) or math.isnan(y):
    #         return float("nan")
    #     elif x == 0 and y < 0:
    #         return float("inf")
    #     elif math.isinf(y):
    #         if x == 1 or x == -1:
    #             return float("nan")
    #         elif abs(x) < 1:
    #             if y > 0:
    #                 return 0.0
    #             else:
    #                 return float("inf")
    #         else:
    #             if y > 0:
    #                 return float("inf")
    #             else:
    #                 return 0.0
    #     elif math.isinf(x):
    #         if y == 0:
    #             return 1.0
    #         elif y < 0:
    #             return 0.0
    #         else:
    #             if x < 0 and round(y) == y and y % 2 == 1:
    #                 return float("-inf")
    #             else:
    #                 return float("inf")
    #     elif x < 0 and round(y) != y:
    #         return float("nan")
    #     else:
    #         try:
    #             return math.pow(x, y)
    #         except OverflowError:
    #             if abs(y) < 1:
    #                 if x < 0:
    #                     return float("nan")
    #                 else:
    #                     return 1.0
    #             else:
    #                 if (abs(x) > 1 and y < 0) or (abs(x) < 1 and y > 0):
    #                     return 0.0
    #                 else:
    #                     return float("inf")

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left ** right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             z = power(x, y)
    #                             if z not in result:
    #                                 raise AssertionError("%r**%r = %r not in %r**%r = %r" % (x, y, z, left, right, result))

    # ## NumberType mod (handmade)

    # assertCase(TypeError, lambda: NumberType(-5, 15) % NumberType(-10, 10))
    # assertCase(TypeError, lambda: NumberType(-5, "inf") % NumberType(-10, 10))
    # assertCase(TypeError, lambda: NumberType("-inf", 15) % NumberType(-10, 10))
    # assertCase(TypeError, lambda: NumberType("-inf", "inf") % NumberType(-10, 10))

    # assert NumberType(3, 5, whole=True) % NumberType(10, 10, whole=True) == NumberType(3, 5, whole=True)
    # assert NumberType(3, 5, whole=True) % NumberType(10, 10, whole=False) == NumberType(3, 5, whole=False)
    # assert NumberType(3, 5, whole=False) % NumberType(10, 10, whole=True) == NumberType(3, 5, whole=False)
    # assert NumberType(3, 5, whole=False) % NumberType(10, 10, whole=False) == NumberType(3, 5, whole=False)

    # assert NumberType(3, 5) % NumberType(10, 10) == NumberType(3, 5)
    # assert NumberType(3, 15) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(3, almost("inf")) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(-5, 5) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(-5, 15) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(-5, almost("inf")) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, 10) == NumberType(0, almost(10))
    # assert NumberType(3, 5) % NumberType(10, 11) == NumberType(3, 5)
    # assert NumberType(3, 15) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(3, almost("inf")) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(-5, 5) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(-5, 15) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(-5, almost("inf")) % NumberType(10, 11) == NumberType(0, almost(11))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, 11) == NumberType(0, almost(11))

    # assert NumberType(-5, -3) % NumberType(-10, -10) == NumberType(-5, -3)
    # assert NumberType(-15, -3) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(almost("-inf"), -3) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(-5, 5) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(-15, 5) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(almost("-inf"), 5) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(-10, -10) == NumberType(almost(-10), 0)
    # assert NumberType(-5, -3) % NumberType(-11, -10) == NumberType(-5, -3)
    # assert NumberType(-15, -3) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(almost("-inf"), -3) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(-5, 5) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(-15, 5) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(almost("-inf"), 5) % NumberType(-11, -10) == NumberType(almost(-11), 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(-11, -10) == NumberType(almost(-11), 0)

    # assert NumberType(3, 5) % NumberType("inf", "inf") == NumberType(3, 5)
    # assert NumberType(3, 15) % NumberType("inf", "inf") == NumberType(3, 15)
    # assert NumberType(3, almost("inf")) % NumberType("inf", "inf") == NumberType(3, almost("inf"))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("inf", "inf") == NumberType(0, "inf")
    # assert NumberType(-5, 5) % NumberType("inf", "inf") == NumberType(0, "inf")
    # assert NumberType(-5, 15) % NumberType("inf", "inf") == NumberType(0, "inf")
    # assert NumberType(-5, almost("inf")) % NumberType("inf", "inf") == NumberType(0, "inf")
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("inf", "inf") == NumberType(0, "inf")
    # assert NumberType(3, 5) % NumberType(10, "inf") == NumberType(3, 5)
    # assert NumberType(3, 15) % NumberType(10, "inf") == NumberType(0, almost("inf"))
    # assert NumberType(3, almost("inf")) % NumberType(10, "inf") == NumberType(0, almost("inf"))
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, "inf") == NumberType(0, "inf")
    # assert NumberType(-5, 5) % NumberType(10, "inf") == NumberType(0, "inf")
    # assert NumberType(-5, 15) % NumberType(10, "inf") == NumberType(0, "inf")
    # assert NumberType(-5, almost("inf")) % NumberType(10, "inf") == NumberType(0, "inf")
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType(10, "inf") == NumberType(0, "inf")

    # assert NumberType(-5, -3) % NumberType("-inf", "-inf") == NumberType(-5, -3)
    # assert NumberType(-15, -3) % NumberType("-inf", "-inf") == NumberType(-15, -3)
    # assert NumberType(almost("-inf"), -3) % NumberType("-inf", "-inf") == NumberType(almost("-inf"), -3)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("-inf", "-inf") == NumberType("-inf", 0)
    # assert NumberType(-5, 5) % NumberType("-inf", "-inf") == NumberType("-inf", 0)
    # assert NumberType(-15, 5) % NumberType("-inf", "-inf") == NumberType("-inf", 0)
    # assert NumberType(almost("-inf"), 5) % NumberType("-inf", "-inf") == NumberType("-inf", 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("-inf", "-inf") == NumberType("-inf", 0)
    # assert NumberType(-5, -3) % NumberType("-inf", -10) == NumberType(-5, -3)
    # assert NumberType(-15, -3) % NumberType("-inf", -10) == NumberType(almost("-inf"), 0)
    # assert NumberType(almost("-inf"), -3) % NumberType("-inf", -10) == NumberType(almost("-inf"), 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("-inf", -10) == NumberType("-inf", 0)
    # assert NumberType(-5, 5) % NumberType("-inf", -10) == NumberType("-inf", 0)
    # assert NumberType(-15, 5) % NumberType("-inf", -10) == NumberType("-inf", 0)
    # assert NumberType(almost("-inf"), 5) % NumberType("-inf", -10) == NumberType("-inf", 0)
    # assert NumberType(almost("-inf"), almost("inf")) % NumberType("-inf", -10) == NumberType("-inf", 0)

    # for a in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #     for b in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #         for c in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #             for d in ["-inf", almost("-inf"), -2, almost(-2), 0, almost(0), 2, almost(2), "inf", almost("inf")]:
    #                 try:
    #                     left = NumberType(a, b)
    #                     right = NumberType(c, d)
    #                 except TypeError:
    #                     continue
    #                 try:
    #                     result = left % right
    #                 except TypeError:
    #                     pass
    #                 else:
    #                     for x in valuesInInterval(left):
    #                         for y in valuesInInterval(right):
    #                             z = x % y
    #                             if z not in result:
    #                                 raise AssertionError("%r %% %r = %r not in %r %% %r = %r" % (x, y, z, left, right, result))

